generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  name                 String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  instruments          String[]
  major                String
  nim                  String               @unique
  organizationLvl      OrganizationLvl
  phoneNumber          String
  technicLvl           TechnicLvl
  eventPersonnel       EventPersonnel[]
  notifications        Notification[]
  notificationSettings NotificationSetting?
  pushSubscriptions    PushSubscription[]
  fcmSubscriptions     FCMSubscription[]
}

model Event {
  id                  String           @id @default(cuid())
  title               String
  description         String?
  date                DateTime
  location            String
  status              EventStatus      @default(DRAFT)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  isSubmittedByPublic Boolean?         @default(false)
  submittedBy         String?
  slotConfigurable    Boolean          @default(false)
  slotConfiguration   Json?
  personnel           EventPersonnel[]
  availableSlots      EventSlot[]
  songs               EventSong[]
  notifications       Notification[]
}

model EventPersonnel {
  id      String         @id @default(cuid())
  role    String
  status  ApprovalStatus @default(PENDING)
  userId  String?
  eventId String
  slotId  String?
  event   Event          @relation(fields: [eventId], references: [id])
  slot    EventSlot?     @relation(fields: [slotId], references: [id])
  user    User?          @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model EventSong {
  id        String   @id @default(cuid())
  title     String
  artist    String?
  key       String?
  duration  String?
  notes     String?
  order     Int
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, order])
}

model EventSlot {
  id        String           @id @default(cuid())
  eventId   String
  slotName  String
  slotType  SlotType         @default(CUSTOM)
  capacity  Int              @default(1)
  required  Boolean          @default(true)
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  personnel EventPersonnel[]
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, slotName])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  userId    String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  eventId   String?
  actionUrl String?
  event     Event?           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model NotificationSetting {
  id                  String  @id @default(cuid())
  userId              String  @unique
  eventReminder       Boolean @default(true)
  personnelAssigned   Boolean @default(true)
  eventStatusChanged  Boolean @default(true)
  songAdded           Boolean @default(true)
  browserNotification Boolean @default(true)
  pushNotification    Boolean @default(true)
  emailNotification   Boolean @default(false)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum OrganizationLvl {
  COMMISSIONER
  TALENT
  SPECTA
  PENGURUS
}

enum TechnicLvl {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  FINISHED
  SUBMITTED
  REJECTED
}

enum SlotType {
  VOCAL
  GUITAR
  BASS
  DRUMS
  KEYBOARD
  CUSTOM
}

enum NotificationType {
  EVENT_REMINDER
  PERSONNEL_ASSIGNED
  EVENT_STATUS_CHANGED
  SONG_ADDED
  DEADLINE_REMINDER
  SLOT_AVAILABLE
}

model FCMSubscription {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  deviceInfo Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}
