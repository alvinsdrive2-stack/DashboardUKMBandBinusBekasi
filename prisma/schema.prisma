generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =======================
// Models
// =======================

model User {
  id              String           @id @default(cuid())
  name            String
  nim             String           @unique
  email           String           @unique
  major           String
  instruments     String[]
  phoneNumber     String
  organizationLvl OrganizationLvl // Penting untuk membedakan 'Pengurus' (misal: COMMISSIONER)
  technicLvl      TechnicLvl

  // Relasi ke partisipasi dalam event
  eventPersonnel  EventPersonnel[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Event {
  id              String           @id @default(cuid())
  title           String
  description     String?
  date            DateTime
  location        String
  status          EventStatus      @default(DRAFT)

  // Field untuk pengajuan publik
  submittedBy     String?          // Kontak pengaju acara publik
  isSubmittedByPublic Boolean?     @default(false) // Menandai apakah diajukan oleh publik

  // Relasi ke personel yang tampil
  personnel       EventPersonnel[]

  // Field untuk slot kostumisasi
  slotConfigurable Boolean @default(false) // Apakah slot bisa dikostumisasi
  slotConfiguration Json?       // Konfigurasi slot (vokal, gitar, dll)

  // Relasi ke lagu-lagu dalam event
  songs           EventSong[]

  // Relasi ke slot yang tersedia
  availableSlots  EventSlot[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model EventPersonnel {
  id       String           @id @default(cuid())
  role     String           // misal: Vocal, Guitar 1, Drummer
  status   ApprovalStatus   @default(PENDING)

  userId   String?          // Dibuat nullable untuk slot kosong/lowongan
  eventId  String
  slotId   String?          // Relasi ke slot yang dipilih (jika ada)

  // Relasi
  user     User?            @relation(fields: [userId], references: [id]) // Relasi opsional
  event    Event            @relation(fields: [eventId], references: [id])
  slot     EventSlot?        @relation(fields: [slotId], references: [id]) // Relasi ke slot

  // PENAMBAHAN PENTING: Unique Constraint Komposit
  // 1. Memastikan 1 user HANYA bisa mendaftar 1 role per event.
  // 2. Memastikan 1 role (misal: "Vocal") HANYA bisa diisi 1 user per event (setelah disetujui/diisi).
  //    Ini lebih efektif di enforce di logika aplikasi, tapi unique komposit ini memastikan user tidak bisa double-daftar.
  @@unique([userId, eventId])
  // Saran: jika Anda ingin memastikan role-role default (misal "Vocal") juga unik,
  // Anda harus membuat role menjadi tabel terpisah atau menambahkan unique constraint:
  // @@unique([role, eventId])
  // TAPI, ini akan mengunci satu role ke satu orang selamanya, yang mana mungkin tidak cocok jika
  // slot awal dibuat kosong dan diisi oleh pengurus.

  // Jadi, biarkan `@unique([userId, eventId])` sebagai kunci utama untuk mencegah double-daftar.
}

model EventSong {
  id        String   @id @default(cuid())
  title     String
  artist    String?
  key       String?  // Nada dasar (contoh: C, Am, G#m)
  duration  String?  // Durasi lagu (contoh: 3:45)
  notes     String?  // Catatan tambahan tentang lagu
  order     Int      // Urutan dalam setlist

  // Foreign keys
  eventId   String

  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraints
  @@unique([eventId, order]) // Setiap order harus unik per event
}

model EventSlot {
  id        String   @id @default(cuid())
  eventId   String
  slotName  String           // misal: "Vokalis Utama", "Gitar 1", "Drummer"
  slotType  SlotType  @default(CUSTOM) // Tipe slot untuk kategorisasi
  capacity  Int      @default(1) // Jumlah orang yang bisa mengisi slot ini
  required  Boolean  @default(true) // Apakah slot wajib diisi
  isActive  Boolean  @default(true) // Apakah slot aktif

  // Relasi
  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  personnel EventPersonnel[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint
  @@unique([eventId, slotName])
}

// =======================
// Enums
// =======================

enum OrganizationLvl {
  COMMISSIONER // Saran untuk peran Pengurus/Admin
  TALENT
  SPECTA
  PENGURUS     // Atau gunakan PENGURUS/ADMIN jika tidak ada 'COMMISSIONER'
}

enum TechnicLvl {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventStatus {
  SUBMITTED     // Status untuk acara yang diajukan publik, menunggu approval
  DRAFT         // Status untuk acara yang sudah di-approve pengurus
  PUBLISHED     // Status untuk acara yang siap ditampilkan ke anggota
  FINISHED      // Status untuk acara yang sudah selesai
  REJECTED      // Status untuk acara yang ditolak
}

enum SlotType {
  VOCAL         // Slot untuk vokalis
  GUITAR        // Slot untuk gitaris
  BASS          // Slot untuk basis
  DRUMS         // Slot untuk drummer
  KEYBOARD      // Slot untuk keyboardis/pianis
  CUSTOM        // Slot kostum (bisa diisi apa saja)
}